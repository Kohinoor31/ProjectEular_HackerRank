import java.util.Scanner;

public class GridPaths {
    static final int MOD = 1000000007;
    static final int MAX = 1000; // for N+M up to 1000
    static long[] fact = new long[MAX + 1];
    static long[] invFact = new long[MAX + 1];

    public static void main(String[] args) {
        // Precompute factorials and inverses
        precomputeFactorials();

        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt(); // number of test cases

        while (T-- > 0) {
            int N = sc.nextInt();
            int M = sc.nextInt();
            // Compute C(N+M, N) modulo (10^9 + 7)
            long ways = nCr(N + M, N);
            System.out.println(ways);
        }
        sc.close();
    }

    // Precompute factorials and inverse factorials up to MAX
    static void precomputeFactorials() {
        fact[0] = 1;
        for (int i = 1; i <= MAX; i++) {
            fact[i] = (fact[i - 1] * i) % MOD;
        }
        // invFact[MAX] = modular inverse of fact[MAX] using Fermat's Little Theorem
        invFact[MAX] = modInverse(fact[MAX], MOD);
        // Now fill in the rest of the invFact array
        for (int i = MAX - 1; i >= 0; i--) {
            invFact[i] = (invFact[i + 1] * (i + 1)) % MOD;
        }
    }

    // Compute nCr using precomputed factorials: fact[n] * invFact[r] * invFact[n-r]
    static long nCr(int n, int r) {
        if (r > n || r < 0) return 0;
        return ((fact[n] * invFact[r]) % MOD * invFact[n - r]) % MOD;
    }

    // Compute x^(-1) mod p using Fermat's Little Theorem: x^(p-2) mod p
    static long modInverse(long x, int p) {
        return fastPower(x, p - 2, p);
    }

    // Fast exponentiation to compute base^exp mod p
    static long fastPower(long base, int exp, int p) {
        long result = 1;
        base = base % p;
        while (exp > 0) {
            if ((exp & 1) == 1) {
                result = (result * base) % p;
            }
            base = (base * base) % p;
            exp >>= 1;
        }
        return result;
    }
}
