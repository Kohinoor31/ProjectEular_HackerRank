import java.util.*;

public class TriangleNumberDivisors {
    
    // Function to count the number of divisors efficiently
    public static int countDivisors(int num) {
        if (num == 1) return 1;
        int count = 0;
        int sqrt = (int) Math.sqrt(num);
        for (int i = 1; i <= sqrt; i++) {
            if (num % i == 0) {
                count += 2; // i and num/i
                if (i * i == num) count--; // If perfect square, don't double count
            }
        }
        return count;
    }
    
    // Function to find the first triangle number with over N divisors
    public static int findTriangleNumber(int N) {
        int index = 1;
        int triangleNumber = 1;
        
        while (true) {
            int num1 = index % 2 == 0 ? index / 2 : index; // Split factors
            int num2 = (index + 1) % 2 == 0 ? (index + 1) / 2 : (index + 1);
            
            int divisors = countDivisors(num1) * countDivisors(num2);
            
            if (divisors > N) return triangleNumber;
            
            index++;
            triangleNumber += index;
        }
    }
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int T = scanner.nextInt(); // Number of test cases
        
        while (T-- > 0) {
            int N = scanner.nextInt();
            System.out.println(findTriangleNumber(N));
        }
        
        scanner.close();
    }
}
