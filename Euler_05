import java.io.*;
import java.math.*;

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        StringBuilder output = new StringBuilder();

        // Process each test case
        for (int t = 0; t < T; t++) {
            int N = Integer.parseInt(br.readLine().trim());
            output.append(lcmUpToN(N)).append("\n");
        }

        // Output the results
        System.out.print(output);
    }

    // Function to calculate LCM of numbers from 1 to N
    private static long lcmUpToN(int N) {
        long lcm = 1;
        for (int i = 1; i <= N; i++) {
            lcm = lcm(lcm, i);
        }
        return lcm;
    }

    // Function to calculate LCM of two numbers using GCD
    private static long lcm(long a, long b) {
        return a * b / gcd(a, b);
    }

    // Function to calculate GCD using Euclidean algorithm
    private static long gcd(long a, long b) {
        while (b != 0) {
            long temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
