import java.util.Scanner;

public class MaxProductKDigits {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int T = scanner.nextInt(); // Number of test cases

        while (T-- > 0) {
            int N = scanner.nextInt(); // Length of the number
            int K = scanner.nextInt(); // Length of consecutive digits
            String num = scanner.next(); // The N-digit number
            
            System.out.println(findMaxProduct(num, N, K));
        }
        scanner.close();
    }

    public static long findMaxProduct(String num, int N, int K) {
        long maxProduct = 0;
        long currentProduct = 1;
        int zeroCount = 0; // To track the presence of '0' in the current window
        
        // Compute product for the first K digits
        for (int i = 0; i < K; i++) {
            int digit = num.charAt(i) - '0';
            if (digit == 0) {
                zeroCount++;
            } else {
                currentProduct *= digit;
            }
        }
        if (zeroCount == 0) {
            maxProduct = currentProduct;
        }
        
        // Sliding window approach
        for (int i = K; i < N; i++) {
            int removeDigit = num.charAt(i - K) - '0'; // Outgoing digit
            int addDigit = num.charAt(i) - '0'; // Incoming digit
            
            // Remove the outgoing digit from product calculation
            if (removeDigit == 0) {
                zeroCount--;
            } else {
                currentProduct /= removeDigit;
            }
            
            // Add the new digit
            if (addDigit == 0) {
                zeroCount++;
            } else {
                currentProduct *= addDigit;
            }

            // Update max product if no zero is in the window
            if (zeroCount == 0) {
                maxProduct = Math.max(maxProduct, currentProduct);
            }
        }

        return maxProduct;
    }
}
